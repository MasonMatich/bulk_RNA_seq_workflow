[["setup.html", "GO gene set enrichment analysis Setup Function called for Analysis Read in Data LOTR-1 Mutants Get DESeq2 Results", " GO gene set enrichment analysis Mason Matich 2025-10-20 Setup Many of the figures and analysis methodology were based off of this tutorial from NYU. https://learn.gencore.bio.nyu.edu/rna-seq-analysis/gene-set-enrichment-analysis/ ## Library Preparation library(clusterProfiler) library(ReactomePA) library(DESeq2) library(dplyr) library(tidyverse) library(presto) library(ashr) library(GOSemSim) library(org.Ce.eg.db) library(bookdown) library(knitr) library(DT) library(htmltools) library(kableExtra) # Call functions source(&quot;~/Documents/research_labs/mdibl_fall_2025/updike_lotr1_go_analysis/scripts/translateBioIDs.R&quot;) source(&quot;~/Documents/research_labs/mdibl_fall_2025/updike_lotr1_go_analysis/scripts/callClusterProfilerFunc.R&quot;) source(&quot;~/Documents/research_labs/mdibl_fall_2025/updike_lotr1_go_analysis/scripts/compileOntologyReport.R&quot;) source(&quot;~/Documents/research_labs/mdibl_fall_2025/updike_lotr1_go_analysis/scripts/emptyTableMessage.R&quot;) Function called for Analysis compileOntologyReport.R # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Calls translateBioIDs.R and geneOntologyAnalysis.R # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # compileOntologyReport &lt;- function(result.obj, strain, fraction, l2fc_filter, padj_filter){ # Create comment structure for bookdown render cat(sprintf(&quot;# %s %s {.title .tabset}\\n\\n&quot;, strain, fraction)) #cat(paste0(&quot;# &quot;, strain,&quot; &quot;, fraction, &quot; {.title .tabset}\\n\\n&quot;)) # Show exact call which invoked function call_txt &lt;- paste(deparse(match.call()), collapse = &quot;\\n&quot;) cat(&quot;**Inputs for function call:**\\n\\n&quot;) cat(&quot;```r\\n&quot;) cat(call_txt, &quot;\\n\\n&quot;) cat(&quot;```\\n\\n&quot;) # Translate Wormbase IDs to ENTREZID result.obj.list &lt;- translateBioIDs( DESeqResults.obj = result.obj, bioID = &quot;WORMBASE&quot;, l2fc_filter = l2fc_filter, padj_filter = padj_filter ) # Run gruopGO(), enrichGO(), gseGO(), and goplot() go.result.list &lt;- callClusterProfilerFunc( result.obj.list = result.obj.list, OrgDb = org.Ce.eg.db) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Print text and tables to console for bookdown rendering # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # knitDataTable &lt;- function(df, tableName, fileExtension){ if(nrow(data.frame(df[[1]])) != 0){ table &lt;- list(datatable(data.frame(df[[1]]), extensions = &#39;Buttons&#39;, rownames = FALSE, caption = tableName, options = list( dom = &quot;Bfrtip&quot;, buttons = list(&#39;copy&#39;, list(extend = &#39;csv&#39;, filename = sprintf(&quot;%s_%s_%s&quot;, gsub(&quot; &quot;, &quot;_&quot;, tolower(strain)), tolower(fraction), fileExtension)), list(extend = &#39;excel&#39;, filename = sprintf(&quot;%s_%s_%s&quot;, gsub(&quot; &quot;, &quot;_&quot;, tolower(strain)), tolower(fraction), fileExtension)) ), pageLength = 5, scrollX = TRUE))) print(htmltools::tagList(table[[1]])) cat(&quot;\\n\\n&quot;) write.csv(df[[1]], file = sprintf(&quot;./results/%s_%s_%s.csv&quot;, gsub(&quot; &quot;, &quot;_&quot;, tolower(strain)), tolower(fraction), fileExtension)) }else{emptyTableMessage(tableName)} # clean up environment rm(table) } # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Dysregulated Reactome Pathway GSE, GO GSE # # # cat(paste0(&quot;\\n\\n## Dysregulated\\n\\n&quot;)) # Reactome Pathway GSE cat(&quot;**Reactome Pathway GSEA**&quot;) knitDataTable( df = go.result.list$react_gse, tableName = &quot; Reactome Gene Set Enrichment Analysis&quot;, fileExtension = &quot;Reactome_gsea&quot; ) # # # GSEA plot condiitonal rendering of RP GSEA plots # Tabset for Reactome GSEA plots cat(&quot;#### {.tabset .tabset-dropdown}\\n\\n&quot;) # Print GSEA plot for each react pathway set identified for (i in 1:nrow(data.frame(go.result.list$react_gse[[1]]))) { if (i &gt; 30) {break} # Dont print over 30 plots cat(sprintf(&quot;##### %s \\n\\n&quot;, go.result.list$react_gse[[1]]$Description[i])) print(gseaplot( go.result.list$react_gse[[1]], by = &quot;all&quot;, title = go.result.list$react_gse[[1]]$Description[i], geneSetID = go.result.list$react_gse[[1]]$ID[i])) cat(&quot;\\n\\n&quot;) } # GO GSE cat(&quot;### \\n\\n&quot;) # Break out of previous tabset cat(&quot;**GO GSEA**&quot;) knitDataTable( df = go.result.list$go_gse, tableName = &quot; GSE Of All Differentially Expressed Genes&quot;, fileExtension = &quot;GO_gsea&quot; ) # # # GSEA plot condiitonal rendering # Tabset for GSEA plots cat(&quot;#### {.tabset .tabset-dropdown}\\n\\n&quot;) # Print GSEA plot for each set identified for (i in 1:nrow(data.frame(go.result.list$go_gse[[1]]))) { if (i &gt; 30) {break} # Dont print over 30 plots cat(sprintf(&quot;##### %s \\n\\n&quot;, go.result.list$go_gse[[1]]$Description[i])) print(gseaplot( go.result.list$go_gse[[1]], by = &quot;all&quot;, title = go.result.list$go_gse[[1]]$Description[i], geneSetID = go.result.list$go_gse[[1]]$ID[i])) cat(&quot;\\n\\n&quot;) } # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Upregulated GO classification, GO over-representation, RP over-representation # # # cat(paste0(&quot;\\n\\n## Upregulated\\n\\n&quot;)) # GO classification knitDataTable( df = go.result.list$go_class_upreg, tableName = &quot; GO Classification of Upregulated Genes&quot;, fileExtension = &quot;GO_classification_upreg&quot; ) # GO over-representation knitDataTable( df = go.result.list$go_overrep_upreg, tableName = &quot; GO Over-representation Analysis of Upregulated Genes&quot;, fileExtension = &quot;GO_overrepresented_upreg&quot; ) # RP over-representation knitDataTable( df = go.result.list$react_overrep_upreg, tableName = &quot; Reactome Pathway Over-representation Analysis of Upregulated Genes&quot;, fileExtension = &quot;Reactome_overrepresented_upreg&quot; ) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Downregulated GO classification, GO over-representation, RP over-representation # # # cat(paste0(&quot;\\n\\n## Downregulated\\n\\n&quot;)) # GO classification knitDataTable( df = go.result.list$go_class_downreg, tableName = &quot; GO Classification of Downregulated Genes&quot;, fileExtension = &quot;GO_classification_downreg&quot; ) # GO over-representation knitDataTable( df = go.result.list$go_overrep_downreg, tableName = &quot; GO Over-representation Analysis of Downregulated Genes&quot;, fileExtension = &quot;GO_overrepresented_downreg&quot; ) # RP over-representation knitDataTable( df = go.result.list$react_overrep_downreg, tableName = &quot; Reactome Pathway Over-representation Analysis of Downregulated Genes&quot;, fileExtension = &quot;Reactome_overrepresented_downreg&quot; ) } translateBioIDs.R # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Translating Biological IDS # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # From WormBase to ENTREZID translateBioIDs &lt;- function (DESeqResults.obj, bioID, return.success = TRUE, l2fc_filter, padj_filter) { if (bioID != &quot;WORMBASE&quot;){ stop(&quot;⛔️ ERROR: Only WORMBASE biological ID supported as input.&quot;) } # Convert DESeq2 results object to DataFrame, and edit structure gene.df &lt;- DESeqResults.obj %&gt;% data.frame() %&gt;% rownames_to_column(&quot;WORMBASE&quot;) %&gt;% dplyr::select(WORMBASE, log2FoldChange, pvalue, padj) # Biological ID TranslatoR gene_ids &lt;- bitr(gene.df[,&#39;WORMBASE&#39;], fromType = &quot;WORMBASE&quot;, toType = &quot;ENTREZID&quot;, OrgDb = org.Ce.eg.db) # Record success of ID transfer t1 &lt;- table(gene.df$WORMBASE %in% gene_ids$WORMBASE) # Clear duplicate genes following ID transfer gene_ids &lt;- gene_ids %&gt;% distinct(WORMBASE, .keep_all = T) %&gt;% column_to_rownames(&quot;WORMBASE&quot;) # Add ENTREZID to L2FC carrying DataFrame gene.df &lt;- gene.df %&gt;% mutate(ENTREZID = gene_ids[WORMBASE, 1]) %&gt;% dplyr::select(ENTREZID, log2FoldChange, pvalue, padj) %&gt;% subset(!is.na(ENTREZID)) %&gt;% # remove NA ENTREZ ID values arrange(desc(log2FoldChange)) # &lt;--- arrange genes by L2FC descending rownames(gene.df) &lt;- NULL # # Subset L2FC Data # # # Subset for highly varirable genes variable.genes &lt;- gene.df %&gt;% subset(abs(log2FoldChange) &gt; l2fc_filter &amp; padj &lt; padj_filter &amp; !isNA(padj)) rownames(variable.genes) &lt;- NULL # Subset for highly upregulated genes upregulated.genes &lt;- gene.df %&gt;% subset(log2FoldChange &gt; l2fc_filter &amp; padj &lt; padj_filter &amp; !isNA(padj)) rownames(upregulated.genes) &lt;- NULL # Subset for highly downregulated genes downregulated.genes &lt;- gene.df %&gt;% subset(log2FoldChange &lt; -l2fc_filter &amp; padj &lt; padj_filter &amp; !isNA(padj)) rownames(downregulated.genes) &lt;- NULL # Subset for all genes (universe DataFrame) all.genes &lt;- gene.df %&gt;% subset(!isNA(padj)) %&gt;% arrange(desc(log2FoldChange)) # Vectorized differentially expressed genes vectorized &lt;- all.genes[,2] names(vectorized) &lt;- all.genes[,1] # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Print Results Following Subset # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Record transfer success if (return.success == TRUE){ cat(&quot;\\n&quot;) cat(&quot;**Transfering WORMBASE gene IDs to ENTREZID:**\\n\\n&quot;) cat(&quot;```r\\n&quot;) cat(paste0(t1[[&quot;FALSE&quot;]],&quot; gene IDs were not transfered from WORMBASE to ENTREZID \\n&quot;)) cat(paste0(t1[[&quot;TRUE&quot;]],&quot; gene IDs were successfully transfered from WORMBASE to ENTREZID \\n\\n&quot;)) cat(&quot;```\\n\\n&quot;) } # report number of highly variable genes used for analysis cat(sprintf(&quot;**Number of highly variable genes identified (with | L2FC | &gt; %s and padj &lt; %s) is:**\\n\\n&quot;, toString(l2fc_filter) , toString(padj_filter))) cat(&quot;```r\\n&quot;) cat(length(variable.genes[[1]])) cat(&quot;\\n\\n```\\n\\n&quot;) # report number of highly variable genes used for analysis cat(sprintf(&quot;**Number of highly upregulated genes identified (with L2FC &gt; %s and padj &lt; %s) is:**\\n\\n&quot;, toString(l2fc_filter) , toString(padj_filter))) cat(&quot;```r\\n&quot;) cat(length(upregulated.genes[[1]])) cat(&quot;\\n\\n```\\n\\n&quot;) # report number of highly variable genes used for analysis cat(sprintf(&quot;**Number of highly downregulated genes identified (with L2FC &lt; -%s and padj &lt; %s) is:**\\n\\n&quot;, toString(l2fc_filter) , toString(padj_filter))) cat(&quot;```r\\n&quot;) cat(length(downregulated.genes[[1]])) cat(&quot;\\n\\n```\\n\\n&quot;) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Return Data # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Save all data to list gene.list &lt;- list( variable.genes, upregulated.genes, downregulated.genes, all.genes, vectorized ) names(gene.list) &lt;- c( &quot;variable_genes&quot;, &quot;upregulated_genes&quot;, &quot;downregulated_genes&quot;, &quot;all_genes&quot;, &quot;vectorized_all_DE&quot; ) return(gene.list) } callClusterProfilerFunc.R # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Gene Ontology Enrichment Analysis # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # callClusterProfilerFunc &lt;- function(result.obj.list, OrgDb){ # # Extract filtered lists from list container geneNames.variable &lt;- result.obj.list$variable_genes[,1] geneNames.up &lt;- result.obj.list$upregulated_genes[,1] geneNames.down &lt;- result.obj.list$downregulated_genes[,1] geneList &lt;- result.obj.list$vectorized_all_DE universe &lt;- result.obj.list$all_genes[,1] # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Analysis of Upregulated Genes # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ## RUN WITH BP ONTOLOGY # # GO Classification # # go_class_upreg &lt;- groupGO( gene = geneNames.up, OrgDb = OrgDb, ont = &quot;BP&quot;, level = 3, readable = TRUE) %&gt;% arrange(desc(Count)) # # GO Over-Representation Analysis # # go_overrep_upreg &lt;- enrichGO( gene = geneNames.up, universe = universe, OrgDb = OrgDb, ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.1, qvalueCutoff = 0.1, readable = TRUE) %&gt;% arrange(desc(Count)) # # Reactome Pathway Over-Representation Analysis # # reactome_overrep_upreg &lt;- enrichPathway( gene = geneNames.up, universe = universe, organism = &#39;celegans&#39;, pvalueCutoff = 0.05, qvalueCutoff = 0.1, minGSSize = 20, maxGSSize = 500, readable = TRUE) %&gt;% arrange(desc(Count)) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Analysis of Downregulated Genes # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # GO Classification # # go_class_downreg &lt;- groupGO( gene = geneNames.down, OrgDb = OrgDb, ont = &quot;BP&quot;, level = 3, readable = TRUE) %&gt;% arrange(desc(Count)) # # GO Over-Representation Analysis # # go_overrep_downreg &lt;- enrichGO( gene = geneNames.down, universe = universe, OrgDb = OrgDb, ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.1, qvalueCutoff = 0.1, readable = TRUE) %&gt;% arrange(desc(Count)) # # Reactome Pathway Over-Representation Analysis # # reactome_overrep_downreg &lt;- enrichPathway( gene = geneNames.down, universe = universe, organism = &#39;celegans&#39;, pvalueCutoff = 0.05, qvalueCutoff = 0.1, minGSSize = 20, maxGSSize = 500, readable = TRUE) %&gt;% arrange(desc(Count)) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # GO Gene Set Enrichment Analysis # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # go_gene_set_enrichment &lt;- gseGO( geneList = geneList, OrgDb = OrgDb, ont = &quot;BP&quot;, minGSSize = 20, maxGSSize = 500, pvalueCutoff = 0.1, verbose = FALSE ) # change gene IDs from ENTREZID to symbol go_gene_set_enrichment &lt;- setReadable(go_gene_set_enrichment, OrgDb = OrgDb, keyType=&quot;ENTREZID&quot;) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reactome Enrichment Analysis # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # reactome_gene_set_enrichment &lt;- gsePathway( geneList = geneList, organism = &#39;celegans&#39;, pvalueCutoff = 0.2, pAdjustMethod = &quot;BH&quot;, minGSSize = 20, maxGSSize = 500, verbose = FALSE ) # change Reactome GSE gene IDs from ENTREZID to symbol reactome_gene_set_enrichment &lt;- setReadable(reactome_gene_set_enrichment, OrgDb = OrgDb, keyType=&quot;ENTREZID&quot;) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Return Results # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # go_results &lt;- list( list(go_class_upreg), list(go_overrep_upreg), list(reactome_overrep_upreg), list(go_class_downreg), list(go_overrep_downreg), list(reactome_overrep_downreg), list(go_gene_set_enrichment), list(reactome_gene_set_enrichment) ) names(go_results) &lt;- c( &quot;go_class_upreg&quot;, &quot;go_overrep_upreg&quot;, &quot;react_overrep_upreg&quot;, &quot;go_class_downreg&quot;, &quot;go_overrep_downreg&quot;, &quot;react_overrep_downreg&quot;, &quot;go_gse&quot;, &quot;react_gse&quot; ) return(go_results) } Read in Data # Lysate lys &lt;- readRDS(&quot;~/Documents/research_labs/mdibl_fall_2025/updike_lotr1_go_analysis/intermediate_data/deseq2_dds_objects/lotr1_isolatedStrain_Lysate_BatchCor_dds.rds&quot;) # Polysome ply &lt;- readRDS(&quot;~/Documents/research_labs/mdibl_fall_2025/updike_lotr1_go_analysis/intermediate_data/deseq2_dds_objects/lotr1_isolatedStrain_Polysome_BatchCor_dds.rds&quot;) LOTR-1 Mutants Get DESeq2 Results # Full KO vs WT full_vs_wt.lys &lt;- results(lys, name = &quot;strain_DUP207_vs_DUP167&quot;) full_vs_wt.ply &lt;- results(ply, name = &quot;strain_DUP207_vs_DUP167&quot;) # Tudor KO vs WT tudor_vs_wt.lys &lt;- results(lys, name = &quot;strain_DUP185_vs_DUP167&quot;) tudor_vs_wt.ply &lt;- results(ply, name = &quot;strain_DUP185_vs_DUP167&quot;) # LOTUS KO vs WT lotus_vs_wt.lys &lt;- results(lys, name = &quot;strain_DUP217_vs_DUP167&quot;) lotus_vs_wt.ply &lt;- results(ply, name = &quot;strain_DUP217_vs_DUP167&quot;) "],["full-lotr-1-ko-vs-wt-lysate.html", "Full LOTR-1 KO vs WT Lysate Dysregulated Upregulated Downregulated", " Full LOTR-1 KO vs WT Lysate Inputs for function call: compileOntologyReport(result.obj = full_vs_wt.lys, strain = &quot;Full LOTR-1 KO vs WT&quot;, fraction = &quot;Lysate&quot;, l2fc_filter = 0.8, padj_filter = 0.1) Transfering WORMBASE gene IDs to ENTREZID: 542 gene IDs were not transfered from WORMBASE to ENTREZID 15111 gene IDs were successfully transfered from WORMBASE to ENTREZID Number of highly variable genes identified (with | L2FC | &gt; 0.8 and padj &lt; 0.1) is: 300 Number of highly upregulated genes identified (with L2FC &gt; 0.8 and padj &lt; 0.1) is: 254 Number of highly downregulated genes identified (with L2FC &lt; -0.8 and padj &lt; 0.1) is: 46 Dysregulated Reactome Pathway GSEA GTP hydrolysis and joining of the 60S ribosomal subunit SRP-dependent cotranslational protein targeting to membrane Translation Nonsense Mediated Decay (NMD) independent of the Exon Junction Complex (EJC) L13a-mediated translational silencing of Ceruloplasmin expression Formation of a pool of free 40S subunits Eukaryotic Translation Initiation Cap-dependent Translation Initiation Nonsense-Mediated Decay (NMD) Nonsense Mediated Decay (NMD) enhanced by the Exon Junction Complex (EJC) Metabolism of RNA Formation of the ternary complex, and subsequently, the 43S complex Mitochondrial translation elongation Mitochondrial translation termination Cellular responses to stress Cellular responses to stimuli Translation initiation complex formation Activation of the mRNA upon binding of the cap-binding complex and eIFs, and subsequent binding to 43S Ribosomal scanning and start codon recognition Cellular Senescence DNA Replication Mitochondrial translation Transcriptional regulation by RUNX1 Cross-presentation of soluble exogenous antigens (endosomes) UCH proteinases Cellular response to hypoxia Ubiquitin-dependent degradation of Cyclin D mRNA Splicing - Minor Pathway Generic Transcription Pathway DNA Replication Pre-Initiation GO GSEA translation protein phosphorylation phosphorylation ribosome biogenesis ribonucleoprotein complex biogenesis Upregulated Downregulated Table GO Over-representation Analysis of Downregulated Genes has no rows. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
